#need to make this into a package.
library(IRanges)
library(Biostrings)
#Definitions:
#pfm: position frequency matrix - counts of letters.
#ppm: position probability matrix (relative frequencies)
#pwm: position weight matrix - log likelihood (log(model prob/bg prob))
#testing
filename<-"Macs/run4/top10K.fa"
motiffile<-"/space/motifs/MA0138.2.pfm"   #REST
#Virtual class for all matrix representations of motifs
setClass("motifMatrix",
         representation=representation(
           "VIRTUAL",
           data="matrix",
           alphabet="character",
           bg="numeric"
           )
         )
setMethod("initialize","motifMatrix", function(.Object, data, alphabet=NULL, bg=NULL){
   data <- as.matrix(data)
   if(!is.numeric(data))
     stop("Data must be numeric")
   
   #if alphabet not defined, use rownames of data matrix
   if(is.null(alphabet)){
     if(is.null(rownames(data))) stop("No alphabet provided and cannot use matrix rownames")
     alphabet <-as.character(rownames(data))
   }else{        
     if(any(duplicated(alphabet)))
       stop("Duplicate characters in alphabet")
     if(is.null(rownames(data)))
       rownames(data) <- alphabet
     #otherwise, check given alphabet and rownames agree
     if(! all(rownames(data) %in% alphabet))
       stop("Some rows in data do not correspond to an element in alphabet")
     if(! all(alphabet %in% rownames(data)))
       stop("Some elements in alphabet have no corresponding row in data")
   }
   
   #if bg not defined, all alphabet elements equiprobable:
   if(is.null(bg)) {
     bg <- rep(1/nrow(data), nrow(data))
     names(bg) <- alphabet
   }
   if(!sum(bg)==1)
     stop("background probabilties do not sum to 1")
   if(! all(names(bg) %in% alphabet))
     stop("Background probabilites defined for elements not found in alphabet")
   if(! all(alphabet %in% names(bg)))
     stop("Some elements in alphabet have no corresponding background probability")
   #everything valid. build object.
   .Object@data <-data
   .Object@alphabet <- alphabet
   .Object@bg <- bg
   return(.Object)
 })
#Position Frequency Matrix
setClass("pfm",
         contains=c("motifMatrix"),
         representation=representation(
           pseudocount = "numeric"
           ))
setMethod("initialize","pfm",
          function(.Object,data, pseudocount=0, add.pseudocount=TRUE, ...){
            if(add.pseudocount)
              data <- data + (pseudocount/nrow(data))
            callNextMethod(.Object, data, ...)
          }
          )
#Position Probability (relative freq) Matrix
setClass("ppm",
         contains=c("motifMatrix"))
setMethod("initialize","ppm",
          function(.Object, data, ...) {
            if(! all(apply(data,2,sum)==1))
              stop("All columns in a ppm must sum to 1")
            callNextMethod(.Object, data, ...)
          }
          )
#Position Weight Matrix
setClass("pwm",
         contains=c("motifMatrix"))
setMethod("initialize","pwm",function(.Object,...) callNextMethod(.Object,...))
#A motif. With multiple representations
setClassUnion("pfmOrNULL",c("pfm","NULL"))
setClassUnion("ppmOrNULL",c("ppm","NULL"))
setClassUnion("pwmOrNULL",c("pwm","NULL"))
setClassUnion("numericOrNULL",c("numeric","NULL"))
setClass("motif",
         representation=representation(
           pfm = "pfmOrNULL",
           ppm = "ppmOrNULL",
           pwm = "pwmOrNULL",
           ic = "numericOrNULL"
           )
         )
#only define ppm, pwm, ic if called
#this should generate a motif
#read transfac formatted pfms (jaspar are same format)
read.transfac <- read.jaspar <- function(file, pseudocount=0){
  pfm <- as.matrix(read.table(file))
  rownames(pfm) <- c('A', 'C', 'G', 'T')
  pfm <- new("pfm",data=pfm, pseudocount=pseudocount)
  return(pfm)
}
#
read.jaspar(motiffile)
#setters - not for public consumption
setReplaceMethod('.ppm', 'motif',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
setReplaceMethod('.pwm', 'motif',
                 function(.Object, value){
                   .Object@pwm <- value
                   .Object
                 })
setReplaceMethod('.ic', 'motif',
                 function(.Object, value){
                   .Object@ic <- value
                   .Object
                 })
#setters - not for public consumption
setGeneric(".ppm", function(x, value) standardGeneric(".ppm"))
setReplaceMethod('.ppm', 'motif',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
setGeneric(".pwm", function(x, value) standardGeneric(".pwm"))
setReplaceMethod('.pwm', 'motif',
                 function(.Object, value){
                   .Object@pwm <- value
                   .Object
                 })
setGeneric(".ic", function(x, value) standardGeneric(".ic"))
setReplaceMethod('.ic', 'motif',
                 function(.Object, value){
                   .Object@ic <- value
                   .Object
                 })
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm"))
setReplaceMethod('.ppm', 'motif',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
setGeneric(".pwm<-", function(x, value) standardGeneric(".pwm"))
setReplaceMethod('.pwm', 'motif',
                 function(.Object, value){
                   .Object@pwm <- value
                   .Object
                 })
setGeneric(".ic<-", function(x, value) standardGeneric(".ic"))
setReplaceMethod('.ic', 'motif',
                 function(.Object, value){
                   .Object@ic <- value
                   .Object
                 })
?setReplaceMethod
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm<-"))
setReplaceMethod('.ppm', 'motif',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
?setReplaceMethod
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm<-"))
setReplaceMethod('.ppm',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm<-"))
setReplaceMethod('.ppm<-',
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
?setReplaceMethod
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm<-"))
setReplaceMethod('.ppm',
                 signature=signature('motif','ppm')
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
#setters - not for public consumption
setGeneric(".ppm<-", function(x, value) standardGeneric(".ppm<-"))
setReplaceMethod('.ppm',
                 signature=signature('motif','ppm'),
                 function(.Object, value){
                   .Object@ppm <- value
                   .Object
                 })
setGeneric(".ppm<-",
           function(.Object, value) standardGeneric(".ppm<-"))
setReplaceMethod(".ppm",
                 signature=signature("motif", "ppm"),
                 function(.Object,value) {
                     .Object@ppm <- value
                     .Object
                 })
setGeneric(".pwm<-",
           function(.Object, value) standardGeneric(".pwm<-"))
setReplaceMethod(".pwm",
                 signature=signature("motif", "pwm"),
                 function(.Object,value) {
                     .Object@pwm <- value
                     .Object
                 })
setGeneric(".ic<-",
           function(.Object, value) standardGeneric(".ic<-"))
setReplaceMethod(".ic",
                 signature=signature("motif", "numeric"),
                 function(.Object,value) {
                     .Object@pwm <- value
                     .Object
                 })
#getters
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(.Object@pfm, margin=2))
            return(ppm(.Object))
          })
#getters
setGeneric("ppm",
           function(.Object) standardGeneric("ppm")
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(.Object@pfm, margin=2))
            return(ppm(.Object))
          })
#getters
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(.Object@pfm, margin=2))
            return(ppm(.Object))
          })
pfm
foo
foo<-cbind(c(1,2,3,4),c(4,3,2,1)
)
motif<-read.jaspar(motiffile)
motif
p
#getters
setGeneric("pfm",
           function(.Object) stamdardGeneric("pfm"))
setMethod('pfm',
          signature=signature(.Object="motif"),
          function(.Object){.Object@pfm}
)

#getters
setGeneric("pfm",
           function(.Object) stamdardGeneric("pfm"))
setMethod('pfm',
          signature=signature(.Object="motif"),
          function(.Object){.Object@pfm}
)
motif<-read.jaspar(motiffile)
motif
pfm(motf)
pfm(motif)
#getters
setGeneric("pfm",
           function(.Object) standardGeneric("pfm"))
setMethod('pfm',
          signature=signature(.Object="motif"),
          function(.Object){.Object@pfm}
)
pfm(motif)
class(motif)
#this should generate a motif
#read transfac formatted pfms (jaspar are same format)
read.transfac <- read.jaspar <- function(file, pseudocount=0){
  pfm <- as.matrix(read.table(file))
  rownames(pfm) <- c('A', 'C', 'G', 'T')
  pfm <- new("pfm",data=pfm, pseudocount=pseudocount)
  return(new("motif",pfm=pfm))
}
  motif<-read.jaspar(motiffile)
motif
pfm(motif)
ppm(motif)
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(as.matrix(.Object@pfm), margin=2))
            return(ppm(.Object))
          })
ppm(motif)
pfm<-pfm(motif)
class(pfm)
pfm
pfm@data
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(.Object@pfm@data, margin=2))
            return(ppm(.Object))
          })
ppm(motif)
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(.Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            .ppm(.Object) <- new("ppm", data=prop.table(.Object@pfm@data, margin=2))
            return(ppm(.Object))
          })
motif<-read.jaspar(motiffile)
pfm(mofit)
pfm(mofif)
pfm(motif)
#getters
setGeneric("pfm",
           function(.Object) standardGeneric("pfm"))
setMethod('pfm',
          signature=signature(.Object="motif"),
          function(.Object){.Object@pfm}
)#
pfm(motif)
ppm(motif)
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(.Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            data <- prop.table(.Object@pfm@data, margin=2)
            .ppm(.Object) <- new("ppm", data=data))
            
            return(ppm(.Object))
          })
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(.Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            data <- prop.table(.Object@pfm@data, margin=2)
            .ppm(.Object) <- new("ppm", data=data)
            
            return(ppm(.Object))
          })
ppm(motif)
setGeneric(".ppm<-",
           function(.Object, value) standardGeneric(".ppm<-"))
setReplaceMethod(".ppm",
                 signature=signature("motif", "ppm"),
                 function(.Object,value) {
                     if(!all(apply(value,2,sum)==1))
                       stop("ppm columns must sum to 1")
                     .Object@ppm <- value
                     .Object
                 })
setGeneric("ppm",
           function(.Object) standardGeneric("ppm"))
setMethod('ppm',
          signature=signature(.Object="motif"),
          function(.Object){
            if(!is.null(.Object@ppm))
              return(.Object@ppm)
            if(is.null(.Object@pfm))
              return(NULL)
            data <- prop.table(.Object@pfm@data, margin=2)
            .ppm(.Object) <- new("ppm", data=data)
            
            return(ppm(.Object))
          })
ppm(motif)
motif<-
#setters - not for public consumption
setGeneric(".ppm<-",
           function(.Object, value) standardGeneric(".ppm<-"))
setReplaceMethod(".ppm",
                 signature=signature("motif", "ppm"),
                 function(.Object,value) {
                     .Object@ppm <- value
                     .Object
                 })
#setters - not for public consumption
setGeneric(".ppm<-",
           function(.Object, value) standardGeneric(".ppm<-"))
setReplaceMethod(".ppm",
                 signature=signature("motif", "ppm"),
                 function(.Object,value) {
                     .Object@ppm <- value
                     .Object
                 })
motif<-read.jaspar(motiffile)
ppm(motif)
q()
