source("scripts/qw.R")
source("scripts/liftOver.R")

#read all of the csv files in
as<-read.csv("[% cell_line %]/PET_data/Altered_Spacer.csv")
cd<-read.csv("[% cell_line %]/PET_data/Convergent&Divergent.csv")
lhs<-read.csv("[% cell_line %]/PET_data/Left_Half-Site.csv")
rhs<-read.csv("[% cell_line %]/PET_data/Right_Half-Site.csv")
canon<-read.csv("[% cell_line %]/PET_data/Canonical_RE1.csv")
flipped<-read.csv("[% cell_line %]/PET_data/Flipped_Orientation.csv")
nore1<-read.csv("[% cell_line %]/PET_data/No_RE1_Motif.csv")

cols<-qw(PET.ID, RE1.Type, Chromosome, 
         Left.Motif.Start, Left.Motif.End, Left.Sequence, Left.Direction, 
         Right.Motif.Start, Right.Motif.End, Right.Sequence, Right.Direction, 
         Spacer)


as<-cbind(as, RE1.Type="Altered_Spacer", stringsAsFactors=F)

#left and right are on the same strand
as<-as[,cols]
data<-as

#this we need to split into 2
converg<-cd[cd[,"Orientation"]=="converge",]
diverg<-cd[cd[,"Orientation"]=="diverge",]

converg<-cbind(converg, RE1.Type="Convergent" )
diverg<-cbind(diverg, RE1.Type="Divergent")

converg<-converg[,cols]
diverg<-diverg[,cols]
data<-rbind(data,converg)
data<-rbind(data, diverg)


colnames(lhs)<- qw(PET.ID, Chromosome, Left.Motif.Start, Left.Motif.End, Left.Sequence, Left.Direction)
lhs<-cbind(lhs, RE1.Type="Left_Half_Site", Right.Motif.Start=NA, Right.Motif.End=NA, Right.Sequence=NA, Right.Direction=NA, Spacer=NA)
data<-rbind(data,lhs)


colnames(rhs)<-qw(PET.ID, Chromosome, Right.Motif.Start, Right.Motif.End, Right.Sequence, Right.Direction)
rhs<-cbind(rhs, RE1.Type="Right_Half_Site", Left.Motif.Start=NA, Left.Motif.End=NA, Left.Sequence=NA, Left.Direction=NA, Spacer=NA)
data<-rbind(data, rhs)


#use LHS for Canonical
colnames(canon)<- qw(PET.ID, Chromosome, Left.Motif.Start, Left.Motif.End, Left.Sequence, Left.Direction)
canon<-cbind(canon, RE1.Type="Canonical", Right.Motif.Start=NA, Right.Motif.End=NA, Right.Sequence=NA, Right.Direction=NA, Spacer=NA )
data<-rbind(data, canon)


flipped<-cbind(flipped, RE1.Type="Flipped_Orientation")
#Left and Right direction always the same
flipped<-flipped[,cols]
data<-rbind(data,flipped)


#fix region start and end before adding sites with no re1
Region.Start<-apply(data,1,
                 function(x){
                    return(
                       min(x[qw(Left.Motif.Start,
                                Left.Motif.End,
                                Right.Motif.Start,
                                Right.Motif.End)],
                       na.rm=T)
		    )
	          }
                )

Region.End<-apply(data,1,
                 function(x){
                    return(
                       max(x[qw(Left.Motif.Start,
                                Left.Motif.End,
                                Right.Motif.Start,
                                Right.Motif.End)],
                       na.rm=T)
		    )
	          }
                )
Region.Start<-as.numeric(Region.Start)
Region.End<-as.numeric(Region.End)

data<-cbind(data, Region.Start=as.numeric(Region.Start), Region.End=as.numeric(Region.End))
cols<-c(cols,qw(Region.Start,Region.End))


nore1<-cbind(nore1, RE1.Type="No_RE1", Left.Motif.Start=NA, Left.Motif.End=NA, Left.Sequence=NA, Left.Direction=NA, Right.Motif.Start=NA, Right.Motif.End=NA, Right.Sequence=NA, Right.Direction=NA, Spacer=NA)
nore1<-nore1[,cols]
data<-rbind(data, nore1)

to.map<-data[,qw(Chromosome, Region.Start, Region.End)]
colnames(to.map) <- c("chr","start","end")
mapped <- liftOver(to.map , chain.file="lib/mm8ToMm9.over.chain")
data[,qw(Region.Start,Region.End)] <- mapped[,qw(start,end)] 

to.map<-data[,qw(Chromosome, Left.Motif.Start, Left.Motif.End)]
colnames(to.map) <- c("chr","start","end")
mapped <- liftOver(to.map , chain.file="lib/mm8ToMm9.over.chain")
data[,qw(Left.Motif.Start, Left.Motif.End)] <- mapped[,qw(start,end)] 

to.map<-data[,qw(Chromosome, Right.Motif.Start, Right.Motif.End)]
colnames(to.map) <- c("chr","start","end")
mapped <- liftOver(to.map , chain.file="lib/mm8ToMm9.over.chain")
data[,qw(Right.Motif.Start,Right.Motif.End)] <- mapped[,qw(start,end)] 



#There's no point in keeping anything that doesn't have a region - we don't know where it maps to:
inds <- union(which(is.na(data$Region.Start)), which(is.na(data$Region.End)))
if(length(inds)>0){
  data <- data[-1*inds,]
}


#create a RangedData object for the region start and end:
library(IRanges)

#we have to give them names to avoid a bug in ChIPpeakAnnot if we want to use it later
rd <- RangedData(ranges = IRanges(
                   start= data$Region.Start,
                   end = data$Region.End,
                   ),
                 names = as.character(data$PET.ID),
                 space = as.character(data$Chromsome),
                 values = data[,
                   qw(RE1.Type,
                      Left.Motif.Start, Left.Motif.End, Left.Sequence, Left.Direction,
                      Right.Motif.Start, Right.Motif.End, Right.Sequence, Right.Direction,
                      Spacer)]

                 )
#And save the result
save(rd, file="[% cell_line %]/PET_data/RangedData.R")

