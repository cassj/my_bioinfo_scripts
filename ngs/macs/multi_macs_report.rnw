\documentclass[a4paper]{article}
\begin{document}

\title{Multi Macs Report}
\author{Cass Johnston}

\maketitle


<<echo=F>>=
library(IRanges)
library(xtable)
@

<<echo=F>>=
macs.dir <- grep('Macs', list.files(), value=T)
@
Found Macs directory: \Sexpr{print(macs.dir)}

<<echo=F, results=tex>>= Make a table of the cmds for each run

readme <- file.path(macs.dir, 'README')
readme <- read.table(readme, sep="\t")
colnames(readme) <- c('run','cmd')
readme[,'run'] <- gsub('./run','', readme[,"run"])
runs <- grep('run', list.files(macs.dir), value=T)
tab <- xtable(readme, align='llp{12cm}', caption='Macs Runs')
print(tab, include.rownames=F, size='footnotesize')
@



<<echo=F>>= load your RangedData objects from the runs and make sorted data frames
rd <- list()
df <- list()
for (r in runs){
  file <- file.path(macs.dir,r,"NA_peaks.AnnoRangedData.R")
  if(file.exists(file)){
    rd[[r]] <- get(load(file))
    this.df <- as.data.frame(rd[[r]])
    this.df$pval <- 10^(this.df$values.neg10log10pVal / -10 )
    df[[r]] <- this.df[order(this.df$pval),]
  }else {
    rd[[r]] <- NA
    df[[r]] <- NA
  }
} 
@

<<echo=F>>= Define a function to print out the summary table at different significance cut-offs

make.summary.table <- function(cut.off="all"){
  caption <- 'Macs Results Summary'
  npeaks <- min.peak.length <- ave.peak.length <- max.peak.length <- numeric(length(runs))
  data <- data.frame(npeaks, min.peak.length, ave.peak.length, max.peak.length)
  rownames(data) <- runs
  
  if(is.numeric(cut.off)){
    if(cut.off<1){
      caption <- paste(caption, 'pvalue cut off', cut.off)
    }else
    caption <- paste(caption, 'Top', cut.off,'Peaks')
  }else{
    caption <- paste(caption, 'All Data')
  }
  
  for (r in runs){
    if(class(rd[[r]])!="RangedData"){
      data[r,] <- rep('NA', 4)
    }else{
      this <- df[[r]]
      if(is.numeric(cut.off)){
        if(cut.off<1){
          this <- this[which(this$pval<cut.off),]
        }else{
          cut.off <- min(cut.off, nrow(this))
          this <- this[1:cut.off,]
        }
      }
      if(nrow(this)<1){
        data[r,] <- rep('NA', 4)
      }else{
        data[r,'npeaks'] <- nrow(this)
        data[r,'min.peak.length'] <- min(this[,'values.Length'])
        data[r,'ave.peak.length'] <- round(mean(this[,'values.Length']), digits=2)
        data[r,'max.peak.length'] <- max(this[,'values.Length'])
      }
    }
  }
  
  tab <- xtable(data, caption=caption)
  return(tab)
}

@

\textit{Warnings from Successful Runs:}\\

<<echo=F>>= Make a note of any runs that had too few good peaks
successful.runs <- names(rd)[which(!is.na(rd))]
out.files <- file.path(macs.dir,successful.runs,'out.txt')
cmds<-paste("grep 'WARNING'",out.files)
names(cmds) <- successful.runs
errors <- list()

for(r in successful.runs){
  res<- system(cmds[r], inter=T)
  ignore <- grep("random",res)
  if(length(ignore)>0){
    res <- res[(-1*ignore)]
  }
  if(length(res)>0){
    errors[[r]] <- res
  }
}
if (length(errors)>0){
 print(errors)
}


@ 

<<echo=F, results=tex>>= Generate a summary table for the runs
 options(scipen=50)
 print(make.summary.table())
@ 



<<echo=F, results=tex>>= Generate a summary table for the runs
  print(make.summary.table(100000))
@ 




<<echo=F, results=tex>>= Generate a summary table for the runs
  print(make.summary.table(10000))
@ 



<<echo=F, results=tex>>= Generate a summary table for the runs
  print(make.summary.table(1000))
@ 




<<echo=F, results=tex>>= Generate a summary table for the runs
  print(make.summary.table(0.000001))
@ 




<<echo=F, results=tex>>= Generate a summary table for the runs
  print(make.summary.table(0.000000001))
@ 










<<echo=F>>= ** Function to calculate the overlap for a given cut.off **
count.overlap <- function(cut.off="all", maxgap=0){
  caption <- 'Overlap'
  successful.runs <- names(rd)[which(!is.na(rd))]
  data <- matrix(nrow=length(successful.runs), ncol=length(successful.runs))
  rownames(data) <- colnames(data) <- successful.runs

  if(is.numeric(cut.off)){
    if(cut.off<1){
      caption <- paste(caption, 'pvalue cut off', cut.off)
    }else
    caption <- paste(caption, 'Top', cut.off,'Peaks')
  }else{
    caption <- paste(caption, 'All Data')
  }
  
  
  for (r1 in successful.runs){
    for (r2 in successful.runs){

      #to do cut-offs, it's actually easier to use the data frame
      #and then build a new RangedData for the overlap
      this.r1 <- df[[r1]]
      this.r2 <- df[[r2]]
      
      if(is.numeric(cut.off)){
        if(cut.off<1){
          this.r1 <- this.r1[which(this.r1$pval<cut.off),]
          this.r2 <- this.r2[which(this.r2$pval<cut.off),]
        }else{
          cut.off <- min(cut.off, nrow(this.r1), nrow(this.r2))
          this.r1 <- this.r1[1:cut.off,]
          this.r2 <- this.r2[1:cut.off,]
          }
      }
      
      if( (nrow(this.r1)<1) | (nrow(this.r2)<1) ) {
        data[r1,r2] <- 0
      }else{
        values <- grep('values.', colnames(this.r1), value=T)
        values <- gsub('values.', '',values)
        colnames(this.r1) <- gsub('values.', '', colnames(this.r1))
        colnames(this.r2) <- gsub('values.', '', colnames(this.r2))
        query.len <- nrow(this.r1)
        subject.len <- nrow(this.r2)
        
        rd.1 <- RangedData(ranges = IRanges(
                             start = this.r1$start,
                             end   = this.r1$end,
                             names = this.r1$name,
                             ),
                           space = this.r1$space,
                           values = this.r1[,values]
                           )
     
        rd.2 <- RangedData(ranges = IRanges(
                             start = this.r2$start,
                             end   = this.r2$end,
                             names = this.r2$name,
                             ),
                           space  = this.r2$space,
                           values = this.r2[,values]
                           )
        overlap <- findOverlaps(rd.1, rd.2, multiple=F, maxgap=maxgap)
        overlap.totals <- unlist(lapply(overlap, function(x){return(length(x[!is.na(x)]))}))
        perc.overlapping <- 100*(sum(overlap.totals)/query.len)
        data[r1,r2] <- perc.overlapping
      }
    }
  }
  
  tab <- xtable(data, caption=caption)
  return(tab)
}

@ 




<<echo=F, results=tex>>= 
 options(scipen=50)
 print(count.overlap())
@ 



<<echo=F, results=tex>>= 
  print(count.overlap(100000))
@ 



<<echo=F, results=tex>>= 
  print(count.overlap(10000))
@ 



<<echo=F, results=tex>>= 
  print(count.overlap(1000))
@ 





<<echo=F, results=tex>>= 
print(count.overlap(0.000001))
@ 


<<echo=F, results=tex>>= 
  print(count.overlap(0.000000001))
@ 








%<<echo=F, fig=T>>= ** Plot scores for overlapping regions **
%successful.runs <- names(rd)[which(!is.na(rd))]
%opar <- par( mfrow(length(successful.runs), length(successful.runs)) )
%for(r1 in successful.runs){
%  for(r2 in successful.runs){
%    r1.data <- df[[r1]]
%    r2.data <- df[[r2]]
%
%  }
%}
%
%par(opar)
%@ 



\end{document}
