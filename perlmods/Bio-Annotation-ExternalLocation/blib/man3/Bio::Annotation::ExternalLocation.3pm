.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Annotation::ExternalLocation 3"
.TH Bio::Annotation::ExternalLocation 3 "2008-09-23" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Bio::Annotation::ExternalLocation \- Annotate sequences with an external location
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 11
\&  my $annot = Bio::Annotaion:ExternalLocation\->new(
\&                \-start             => $start,
\&                \-end               => $end,
\&                \-strand            => \-1,
\&                \-taxon             => $taxon,
\&                \-authority         => \(aqNCBI\(aq,
\&                \-coord_sys_type    => \(aqchromosome\(aq
\&                \-coord_sys_version => 37,
\&                \-coord_sys_id      => \(aqX\(aq,
\&                \-tagname           => $tagname,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Store an external location for a sequence, typically a location in a 
genome build (\s-1NCBI\s0, \s-1UCSC\s0 Golden Path etc).
Implements Bio::AnnotationI and Bio::RangeI
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@biperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://bugzilla.bioperl.org/
.Ve
.SH "AUTHOR \- Cass Johnston"
.IX Header "AUTHOR - Cass Johnston"
Email:  caroline-dot-johnston-at-iop-dot-kcl-dot-ac-dot-uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "authority"
.IX Subsection "authority"
.Vb 7
\&  Title   : authority
\&  Usage   : $auth = $loc\->authority($new_auth)
\&  Function: Accessor for the authority / institution that 
\&            defines the accession codes of a co\-ord system
\&            or that provides a gene build
\&  Returns : [String] The authority name
\&  Args    : Optionally,a new value for authority
.Ve
.Sh "taxon"
.IX Subsection "taxon"
.Vb 5
\&  Title   : taxon
\&  Usage   : $taxon = $loc\->taxon($taxon)
\&  Function: Accessor for the species
\&  Returns : An object of class Bio::Taxon
\&  Args    : Optionally,a new value for taxon
.Ve
.Sh "url"
.IX Subsection "url"
.Vb 5
\&  Title   : url
\&  Usage   : $url = $loc\->url($new_url)
\&  Function: Accessor for a url associated with this annotation
\&  Returns : [String] URL associated with this annotation, or undef
\&  Args    : [String] Optional new URL
.Ve
.Sh "coord_sys_type"
.IX Subsection "coord_sys_type"
.Vb 6
\&  Title   : coord_sys_type
\&  Usage   : $coord_sys_type = $loc\->coord_sys_type()
\&  Function: Accessor for the coordinate system type
\&  Returns : [String] The coordinate system type
\&  Args    : [String] Optional new coordinate system 
\&            type
.Ve
.Sh "coord_sys_id"
.IX Subsection "coord_sys_id"
.Vb 5
\&  Title   : coord_sys_id
\&  Usage   : $coord_sys_id = $loc\->coord_sys_id()
\&  Function: Accessor for the coordinate system id
\&  Returns : [String] The coordinate system id (eg. a chromosome name)
\&  Args    : [String] Optional new coordinate system id
.Ve
.Sh "coord_sys_version"
.IX Subsection "coord_sys_version"
.Vb 5
\&  Title   : coord_sys_version
\&  Usage   : $coord_sys_version = $loc\->coord_sys_version($new_version)
\&  Function: Accessor for the coordinate system version
\&  Returns : [String] The coordinate system version
\&  Args    : [String] Optional new coordinate system version
.Ve
.SH "Bio::AnnotationI Implementation"
.IX Header "Bio::AnnotationI Implementation"
.Sh "start"
.IX Subsection "start"
.Vb 8
\&  Title   : start
\&  Usage   : $start = $loc\->start($new_start)
\&  Function: Accessor for the start of the location 
\&            By convention, positions are given relative to the
\&            positive strand, so start is always less than end
\&            regardless of the strand of interest.
\&  Returns : [Int] The start position
\&  Args    : [Int] Optionally a new start position
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 8
\&  Title   : end
\&  Usage   : $end = $loc\->end($new_end)
\&  Function: Accessor for the end of the location 
\&            By convention, positions are given relative to the
\&            positive strand, so start is always less than end
\&            regardless of the strand of interest.
\&  Returns : [Int] The end position
\&  Args    : [Int] Optionally a new end position
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 7
\&  Title   : strand
\&  Usage   : $strand = $loc\->strand($new_strand)
\&  Function: Accessor for the strand of the location 
\&            1 = Positive Strand
\&            \-1 = Negative Strand
\&  Returns : [1 or \-1] The strand of the sequence
\&  Args    : [1 or \-1] Optionally a new value for strand
.Ve
.Sh "length"
.IX Subsection "length"
.Vb 7
\&  Title   : length
\&  Usage   : $len = $loc\->length()
\&  Function: calculates the length of the sequence from 
\&            start and end values
\&  Returns : [Int] The length of the sequence or undef if
\&            either start or end are undefined
\&  Args    : none.
.Ve
.SH "Bio::AnnotationI Implementation"
.IX Header "Bio::AnnotationI Implementation"
.Sh "as_text"
.IX Subsection "as_text"
.Vb 5
\&  Title   : as_text
\&  Usage   : print $annot\->as_text
\&  Function: Returns a text description of the DB location
\&  Returns : String
\&  Args    : none
.Ve
.Sh "hash_tree"
.IX Subsection "hash_tree"
.Vb 5
\&  Title   : hash_tree
\&  Usage   : my $hashref =  $annot\->hash_tree
\&  Function: Returns the location in the form of a hash
\&  Returns : HashRef
\&  Args    : none
.Ve
.PP
.Vb 5
\&  Title   : tagname
\&  Usage   : $annot\->tagname($newval)
\&  Function: Get/set the tagname (default is GenomePosition)
\&  Returns : String
\&  Args    : optional new value for tagname
.Ve
