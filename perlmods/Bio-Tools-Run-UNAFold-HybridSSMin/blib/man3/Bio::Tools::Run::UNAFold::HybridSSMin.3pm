.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::UNAFold::HybridSSMin 3pm"
.TH Bio::Tools::Run::UNAFold::HybridSSMin 3pm "2009-03-13" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Bio::Tools::Run::UNAFold::HybridSSMin \- bioperl run wrapper for the UNAFold hybrid\-ss\-min program.
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  First attempt at a Bioperl Run wrapper for the 
\&  UNAFold hybrid\-ss\-min tool.
\&
\&  Requires the installation of UNAFold from
\&  http://www.bioinfo.rpi.edu/applications/hybrid/download.php
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules. Send your comments and suggestions preferably to one of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General Discussion
\&  http://www.bioperl.org/MailList.html   \- About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track of the bugs and their resolution. Bug reports can be submitted via the web:
.PP
.Vb 1
\&  http://bugzilla.open\-bio.org/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Cass Johnston
.PP
caroline.johnston@iop.kcl.ac.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
None yet but any offers of help would be gratefully accepted.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceeded by a _
.SH "hybrid-ss-min Parameters"
.IX Header "hybrid-ss-min Parameters"
get/set accessors are provided for the following parameters for hybrid-ss-min:
.PP
\&\s-1NA\s0          : (RNA|DNA) Nucleic acid type. Default is \s-1RNA\s0
tmin        : (int) Minimum temperature. Default 37
tinc        : (int) Temperature increment. Default 1
tmax        : (int) Maximum temperature. Default 37
sodium      : (float) Sodium ion concentration (molar). Default is 1
magnesium   : (float) Magnesium ion concentration (molar). Default is 0
polymer     : (boolean) Use salt corrections for polymers instead of oligos. Default is 1
suffix      : (string) Use energy rules with the suffix string. Overrides tmin, tinc, tmax, sodium, magnesium and polymer
output      : (string) prefix output files with output
prohibit    : (i,j,k) prohibit all basepairs in the helix from i,j to i+k\-1, j\-k+1. If j is 0, prohibit bases i to i+k\-1 from pairing at all. If i is 0, prohibit bases j to j\-k+1 from pairing at all. k defaults to 1 if not specified
force       : (i,j,k) force all basepairs in the helix from i,j to to i+k\-1, j\-k+1. If j is 0, forces bases i to i+k\-1 to be double-stranded. If i is 0, forces bases j to j\-k+1 to be double-stranded. k defaults to 1 if not specified
energyOnly  : (boolean) skips computation of structure and returns only dG
noisolate   : (boolean) prohibits all isolated base-pairs (helices of length 1).
mfold       : (P,W,MAX or boolean) causes hybrid-ss-min to perform multiple suboptimal tracebacks in the style of MFold. P indicates the percent sub-optimality to consider. only structures with energies within P% of the minimum will be output. W indicates the window size. A structure must have at least W base pairs that are each a distance of at least away from any basepair in a previous stucture. \s-1MAX\s0 represents an absolute limit on the number of structures computed. This option also tells hybrid-ss-min to generate p\-num values and energy dot plot. 
maxbp       : (int) bases further apart than this value cannot form pairs. Default is no limit.
constraints : (filename) reads a list of constraints from a file. Constraints must be in the form \*(L"Pijk\*(R" or \*(L"Fijk\*(R". These are equivalent to specifying \s-1PROHIBIT\s0 or \s-1FORCE\s0 ijk. If not sepecifed, filename defaults to \s-1PREFIX\s0.aux
basepairs   : (filename) reads a list of allowable helices from a file. Each helix consists of three whitespace-delimited numbers which specify the starting basepair and the length of the helix. When this option is used all basepairs except those in <filename> are prohibited from forming.
circular    : (boolean) treats sequences as circular rather than linear
allpairs    : (boolean) allows basepairs to form between any two nucleotides. Default is only Watson-Crick and Wobble pairings
maxloop     : (int) Maximum size of bulge/interior loops. Default is 30.
nodangle    : (boolean) removes single-base stacking from consideration
simple      : (boolean) makes the penalty for multibranch loops constant rather than affine
prefilter   : (val1 val2) Sets the prefilter to filter out all basepairs except those in groups of val2 adjacent base-pairs of which val1 can form. val2 is the same as val1 if unspecified. Default is 2 of 2.
.PP
Usage in all cases is:
.PP
.Vb 2
\& #get
\& my $val = $obj\->method;
\&
\& #set
\& $obj\->method($val);
\&
\& #set at object creation
\& my $obj = Bio::Tools::Run::UNAFold::HybridSSMin\->new(method1=>\*(Aqvalue\*(Aq,method2=>\*(Aqvalue2\*(Aq);
.Ve
.SH "WrapperBase Methods"
.IX Header "WrapperBase Methods"
.Vb 2
\&  These methods are directly inherited from WrapperBase and not overriden by this class. 
\&  Please see that module\*(Aqs perldoc for details.
.Ve
.Sh "arguments"
.IX Subsection "arguments"
.Sh "no_param_checks"
.IX Subsection "no_param_checks"
.Sh "save_tempfiles"
.IX Subsection "save_tempfiles"
.Sh "outfile_name"
.IX Subsection "outfile_name"
.Sh "tempdir"
.IX Subsection "tempdir"
.Sh "cleanup"
.IX Subsection "cleanup"
.Sh "io"
.IX Subsection "io"
.Sh "executable"
.IX Subsection "executable"
.SH "Overridden WrapperBase methods"
.IX Header "Overridden WrapperBase methods"
.Sh "program_dir"
.IX Subsection "program_dir"
.Vb 4
\&  Usage       : my $dir = $obj\->program_dir; $obj\->program_dir($dir);
\&  Function    : get/set the directory in which the executable is stored.
\&  Default     : \*(Aq\*(Aq, which should be fine if the executable is in your PATH
\&  Note        : Defined but not implemented in WrapperBase.
.Ve
.Sh "program_name"
.IX Subsection "program_name"
.Vb 4
\&  Usage       : my $name = $obj\->program_name; $obj\->program_name($name);
\&  Function    : get/set the name of the executable.
\&  Default     : \*(Aqhybrid\-ss\-min\*(Aq
\&  Note        : Defined by not implemented in WrapperBase
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title     : new()
\& Usage     : my $hybssmin = Bio::Tools::Run::UNAFold::HybridSSMin\->new(seq=>$aseqobj);
\& Function  :
\& Returns   : An object of class Bio::Tools::Run::UNAFold::HybridSSMin
\& Args      : All arguments are optional as they can be added later
.Ve
.Sh "run"
.IX Subsection "run"
.Vb 11
\& Usage    : $obj\->run;
\& Function : Runs hybrid\-ss\-min on the data in the object.
\& Returns  : For now, a hash of results
\& Args     : None
\& Notes    : Most results will be returned in the resulting hash.
\&            Postscript images of the MFE structures will only be 
\&            returned if $obj\->save_tempfiles is true. Once you\*(Aqve 
\&            done whatever you want to do with the plotfiles (in 
\&            $res\->{images}\->{temp}), for example saving them to 
\&            somewhere else, then you can remove the tempfiles by 
\&            calling $obj\->cleanup.
.Ve
.Sh "arguments"
.IX Subsection "arguments"
.Vb 8
\&  Note       : Overriden from WrapperBase.
\&  Function   : Mostly a getter for constucting the hybrid\-ss\-min 
\&               command line argument string.
\&               Can also be used to set multiple command line arguments
\&               in one go
\&  Returns    : A string of command line arguments, like "\-\-tmin=10 \-\-maxbp=30" 
\&  Usage      : (set) $obj\->arguments(tmin=>10, tmax=>40);
\&               (get) my $args = $obj\->arguments;
.Ve
.Sh "clear_arguments"
.IX Subsection "clear_arguments"
.Vb 6
\&   Function  : undef all the hybrid\-ss\-min arguments.
\&               Note that this only clears the hybrid\-ss\-min
\&               arguments, not everything in the object. Things
\&               like program_dir and seq_obj are still defined
\&   Usage     : $obj\->clear_arguments;
\&   Returns   : true if successful.
.Ve
