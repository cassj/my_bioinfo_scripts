#!/usr/bin/perl

use strict;
use warnings;

use Net::Amazon::S3;
use Getopt::Lucid qw ( :all );
use Exception::Class;

my  @specs = (
	      Param("name|n")->required,    
	      Param("access_key|a")->default($ENV{AWS_ACCESS_KEY}),
	      Param("secret_key|s")->default($ENV{AWS_SECRET_KEY}),
	      Param("prefix|p")->default(''),
	      Param("max|m")->default(50),
	     );

my $USAGE = "Usage: s3-list-bucket --name <bucket_name> --access_key <aws access key> --secret_key <aws secret key> --prefix <search string> --max_keys <max results to return>";

#try
my $opt;
eval { $opt = Getopt::Lucid->getopt( \@specs ) };

#catch
my $e;
if ( $e = Exception::Class->caught('Getopt::Lucid::Exception::ARGV') ){
  print "$@\n$USAGE\n";
  exit;
} 
else {
  $e = Exception::Class->caught();
  ref $e ? $e->rethrow : die $e if $e;
}

my $name = lc($opt->get_name);
my $prefix = $opt->get_prefix;
my $max = $opt->get_max;
die "Max must be a positive integer" unless ($max =~/^\d+$/ && $max>0);
my $access_key = $opt->get_access_key or die "No access key specified and none in \$AWS_ACCESS_KEY\n$USAGE\n";
my $secret_key = $opt->get_secret_key or die "No secret key specified and none in \$AWS_SECRET_KEY\n$USAGE\n";

my $s3 = Net::Amazon::S3->new({
			       'aws_access_key_id'     => $access_key,
			       'aws_secret_access_key' => $secret_key,
			       'retry'                 => 1,
			       'secure'                => 1,
			      });
			      
#retrieve bucket
my $bucket = $s3->bucket($name) or die $s3->err . ": " . $s3->errstr;
my $contents = $bucket->list_all({
				  'prefix'   => $prefix,
				  'max-keys' => $max,
				  
				 }) or die $s3->err.": ".$s3->errstr;


print "\n".$contents->{bucket}.":\n";
print "Too many results, data has been truncated by AWS" if $contents->{is_truncated};
print "-"x60;
print "\n";

foreach(@{$contents->{keys}}){
 
  print "\t".$_->{key}."\n\t";
  print "Modifed: ".$_->{last_modified}."\n\t" if $_->{last_modified};
  print "Etag: ".$_->{etag}."\n\t" if $_->{etag};
  print "Size: ".$_->{size}."\n\t" if $_->{size};
  print "Storage Class: ".$_->{storage_class}."\n\t" if $_->{storage_class};
  print "Owner ID: ".$_->{owner_id}."\n\t" if $_->{owner_id};
  print "Owner Name: ".$_->{owner_displayname}."\n" if $_->{owner_displayname};
  print "\n";
}

